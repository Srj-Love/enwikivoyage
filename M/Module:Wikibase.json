["-- Module:Wikibase\nfunction getId( id )\n    if not mw.wikibase then\n           return \"wikibase module not found\"\n    end\n    \n    if id then return id end\n    \n    entity = mw.wikibase.getEntity()\n    if not entity then return nil end\n    return entity.id\nend\n\n-- Returns the link corresponding to the code provided.\nfunction sitelink(dbname)\n    if dbname==nil or dbname=='' then\n        return ''\n    end\n    local sl = mw.wikibase.getEntity()\n    if sl and sl.sitelinks[dbname] then\n        return sl.sitelinks[dbname].title\n    end\n    return ''\nend\n\n-- Returns the corresponding geographical coordinates of the item\nfunction coords(typ,fallback)\n    if fallback~=nil and fallback~='' and string.match(fallback, '^<%!%-%-.*%-%->$')==nil then\n        return fallback\n    end\n    local item = mw.wikibase.getEntity()\n    if item~=nil and item.claims~=nil then\n        local coords = item.claims.p625\n        if coords~=nil and coords[0]~=nil and coords[1]==nil then\n            return coords[0].mainsnak.datavalue.value[typ]\n        end\n    end\n    return ''\nend\n\n-- Returns the most updated info from a series of statements\nfunction updated(item,prop,frame)\n    if item~=nil then\n        local claims = item.claims\n        if claims~=nil and claims[prop]~=nil then\n            for index,claim in pairs(claims[prop]) do\n                local qual = claim.qualifiers\n                if qual==nil or qual.p582==nil then\n                    -- p582 è la data di fine, significa che non è il valore attuale\n                    local val = claim.mainsnak.datavalue.value\n                    if val['numeric-id']~=nil then\n                        local id = 'Q'..val['numeric-id']\n                        local sl = mw.wikibase.sitelink(id)\n                        local lb = mw.wikibase.label(id)\n                        if sl~=nil and sl~='' then\n                            return frame:preprocess('",{"type":"[[","value":[["'..sl..'"],["'..lb..'"]]},"')\n                        end\n                        return lb\n                    end\n                    return val\n                end\n            end\n        end\n    end\n    return ''\nend\n\nlocal p = {}\n\n-- Returns the ID number of the data item linked to the current page.\nfunction p.id(frame)\n    id = getId(frame.args[1])\n    if id == nil then\n           return \"(no element found)\"\n    end\n    return id\nend\n\n\n-- Returns the ID number of the data item linked to the current page in the form of a link to Wikidata.\nfunction p.idLink(frame)\n    id = getId(frame.args[1])\n    if id == nil then\n           return \"(no element found)\"\n    end\n    return \"",{"type":"[[","value":[["d:\" .. id .. \""],["\" .. string.upper(id) .. \""]]},"\"\nend\n\n\n-- Returns the label of the data item.\nfunction p.label(frame)\n    id = getId(frame.args[1])\n    if id == nil then\n           return \"(no element found)\"\n    end\n    return mw.wikibase.label( id )\nend\n \n-- Returns the local page of the data item provided.\nfunction p.page(frame)\n    id = getId(frame.args[1])\n    if id == nil then\n           return \"(no element found)\"\n    end\n    return mw.wikibase.sitelink( id )\nend\n\n-- Returns the link corresponding to the code provided.\nfunction p.sitelink(frame)\n    return sitelink(frame.args.dbname or frame.args[1])\nend\n\n-- Returns the corresponding link to Wikipedia in English.\nfunction p.enwikilink(frame)\n    if frame.args[1]~=nil and frame.args[1]~='' then\n        return frame.args[1]\n    end\n    local sl = sitelink('enwiki')\n    if sl~=nil and sl~='' then\n        return sl\n    end\n    local t = mw.title.getCurrentTitle().text\n    if t~=nil and t~='' then\n        return t\n    end\n    return ''\nend\n\n-- Returns the Commons category of the data item.\nfunction p.commonslink(frame)\n    if frame.args[1]~=nil and frame.args[1]~='' then\n        return 'Category:'..frame.args[1]\n    end\n    local item = mw.wikibase.getEntity()\n    if item~=nil and item.claims~=nil then\n        local cat = item.claims.p373\n        if cat~=nil and cat[0]~=nil and cat[1]==nil and cat[0].mainsnak.datavalue.value~=nil then\n            return 'Category:'..(cat[0].mainsnak.datavalue.value)\n        end\n    end\n    local t = mw.title.getCurrentTitle().text\n    if t~=nil and t~='' then\n        return 'Category:'..t\n    end\n    return ''\nend\n\n-- Returns the name of the capital or main city.\nfunction p.capital(frame)\n    if frame.args[1]~=nil and frame.args[1]~='' then\n        return frame.args[1]\n    end\n    local item = mw.wikibase.getEntity()\n    return updated(item,'p36',frame)\nend\n\nfunction p.capoluogo(frame)\n    return p.capital(frame)\nend\n\nfunction p.valuta(frame)\n    if frame.args[1]~=nil and frame.args[1]~='' then\n        return frame.args[1]\n    end\n    local item = mw.wikibase.getEntity()\n    return updated(item,'p38',frame)\nend\n\nfunction p.flag(frame)\n    if frame.args[1]~=nil and frame.args[1]~='' then\n        return frame.args[1]\n    end\n    local item = mw.wikibase.getEntity()\n    return updated(item,'p41',frame)\nend\n\n-- Restituisce l'etichetta dell'elemento rappresentante la bandiera relativa all'elemento dell'articolo\nfunction p.bandiera_titolo(frame)\n    local item = mw.wikibase.getEntity()\n    if item~=nil then\n        local claims = item.claims\n        if claims~=nil and claims.p163~=nil and claims.p163[0]~=nil and claims.p163[1]==nil then\n            return mw.wikibase.label('Q'..claims.p163[0].mainsnak.datavalue.value['numeric-id'])\n        end\n    end\n    return mw.title.getCurrentTitle().text..' - Bandiera'\nend\n\n-- Restituisce la latitudine corrispondente all'articolo.\nfunction p.latitude(frame)\n    return coords('latitude',frame.args[1])\nend\n\n-- Restituisce la longitudine corrispondente all'articolo.\nfunction p.longitude(frame)\n    return coords('longitude',frame.args[1])\nend\n\nfunction p.disambig(frame)\n\tlocal item = mw.wikibase.getEntity()\n\tif item~=nil and item.descriptions~=nil then\n\t\tlocal desc = item.descriptions.en\n\t\tif desc~=nil and desc.value~=nil and desc.value:lower():find('disambiguation page')~=nil then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\n\nreturn p"]